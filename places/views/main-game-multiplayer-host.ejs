<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Trivia Game Host</title>
    <link
      rel="stylesheet"
      href="/places/style/main-game-multiplayer-host.css"
    />
  </head>

  <body>
    <div id="question-container">
      <!-- Question here -->
    </div>
    <div id="participants">
      <h3>Joined Participants</h3>
    </div>

    <div id="start-game-button">
      <button id="startExploringBtn">Start Exploring</button>
    </div>

    <div id="category-buttons" style="display: none">
      <!-- Category buttons dynamically added here -->
    </div>

    <div id="scores">
      <h3>Scores</h3>
      <!-- Scores will be dynamically added here -->
    </div>

    <div id="nationalParks" style="display: none">
      <!-- <img id="parkImage" src="" alt="National Park" style="max-width: 100%; height: auto;"> -->
      <button id="nextParkBtn">Next Question!</button>

      <button id="revealAnswerBtn" style="display: none">Reveal Answer</button>
      <p id="correctAnswerText" style="display: none">Correct Answer:</p>
      <button id="endGameBtn" style="display: none">End Game</button>
    </div>

    <script src="http://localhost:8000/socket.io/socket.io.js"></script>
    <!-- <script src="https://cdn.socket.io/4.7.4/socket.io.min.js" integrity="sha384-Gr6Lu2Ajx28mzwyVR8CFkULdCU7kMlZ9UthllibdOSo6qAiN+yXNHqtgdTvFXMT4" crossorigin="anonymous"></script> -->
    <script>
      const socket = io();
      let currentCategory = null; //to store the current category
      let currentAnswer = "";

      // Listen for player join updates
      socket.on("playerJoined", (playerData) => {
        const participantsDiv = document.getElementById("participants");
        participantsDiv.innerHTML += `<p>${playerData.nickname}</p>`;
      });

      // Fetch categories and dynamically create buttons
      function fetchCategoriesAndCreateButtons() {
  fetch("/api/categories")
    .then((response) => response.json())
    .then((categories) => {
      const categoryButtonsDiv = document.getElementById("category-buttons");
      categoryButtonsDiv.innerHTML = "";
      categories.forEach((category) => {
        const button = document.createElement("button");
        button.textContent = category.name;
        button.addEventListener("click", function () {
          currentCategory = category.name; // Store current category
          document.getElementById("category-buttons").style.display = "none";
          document.getElementById("nationalParks").style.display = "block";
          document.getElementById("endGameBtn").style.display = "block"; // Make the end game button visible
          generateQuestionsForCategory(currentCategory); // fetch the first question for the category
        });
        categoryButtonsDiv.appendChild(button);
      });
    })
    .catch((error) => console.error("Error fetching categories:", error));
}

      // start exploring button click
      document
        .getElementById("startExploringBtn")
        .addEventListener("click", function () {
          document.getElementById("participants").style.display = "none";
          document.getElementById("start-game-button").style.display = "none";
          fetchCategoriesAndCreateButtons();
          document.getElementById("category-buttons").style.display = "block";
        });


       

        socket.on("scoreUpdated", (data) => {
  // Attempt to find an existing score display element for the player
  let scoreDisplay = document.getElementById(`score-${data.nickname}`);

  // If the score display element doesn't exist, create it
  if (!scoreDisplay) {
    scoreDisplay = document.createElement("div");
    scoreDisplay.id = `score-${data.nickname}`; // Ensure the ID is unique to the player
    scoreDisplay.className = "score-item"; // Optionally, assign a class for styling
    document.getElementById("scores").appendChild(scoreDisplay);
  }

  // Update the score display with the latest score
  scoreDisplay.innerText = `${data.nickname}: ${data.score}`;
});


      function fetchNextPark() {
        fetch("/getNationalParkImage")
          .then((response) => response.json())
          .then((data) => {
            const imageUrl = data.imageUrl;
            document.getElementById("parkImage").src = imageUrl;
          })
          .catch((error) => console.error("Error fetching park image:", error));
      }

      function generateQuestionsForCategory(category) {
        fetch("/places/generate_questions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            category: category,
            num_questions: 1,
          }),
        })
          .then((response) => response.json())
          .then((data) => {
            const questionContainer =
              document.getElementById("question-container");
            const question = data.questions[0];
            const imageUrl = data.photoUrl;
            currentAnswer = question.answer; // store the current correct answer

            // Update the question container with the question and image
            questionContainer.innerHTML = `
                    <div style="text-align: center; width: 100%;">
                        <img src="${imageUrl}" alt="Place Image">
                        <div class="question-backdrop">
                            <p class="question-text">${question.question}</p>
                        </div>
                    </div>
                `;

                document.getElementById("scores").style.display = "block";

            document.getElementById("revealAnswerBtn").style.display =
              "inline-block";
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      //  Reveal Answer button
      document
        .getElementById("revealAnswerBtn")
        .addEventListener("click", function () {
          const correctAnswerText =
            document.getElementById("correctAnswerText");
          if (
            correctAnswerText.style.display === "none" ||
            correctAnswerText.style.display === ""
          ) {
            correctAnswerText.style.display = "block";
            correctAnswerText.textContent = `Correct Answer: ${currentAnswer}`;
            this.textContent = "Hide Answer";
          } else {
            correctAnswerText.style.display = "none";
            this.textContent = "Reveal Answer";
          }
        });

      // "Next" button to fetch a new question for the current category
      document
        .getElementById("nextParkBtn")
        .addEventListener("click", function () {
          if (currentCategory) {
            generateQuestionsForCategory(currentCategory); // grab a new question
          }
        });



        document.getElementById("endGameBtn").addEventListener("click", function () {
    // Emit the 'endGame' event to notify the server to end the game
    socket.emit('endGame');
  });

  socket.on('gameEnded', (finalScores) => {
    // Hide unnecessary elements
    document.getElementById("question-container").style.display = "none";
    document.getElementById("nationalParks").style.display = "none";

    // Prepare to display final scores
    const scoresDiv = document.getElementById("scores");
    scoresDiv.innerHTML = '<h3>Final Scores</h3>'; // Reset the scores area

    // Check if finalScores is an object and has properties
    if(finalScores && typeof finalScores === 'object' && Object.keys(finalScores).length > 0) {
      Object.keys(finalScores).forEach(nickname => {
        // Append each player's score to the scoresDiv
        scoresDiv.innerHTML += `<p>${nickname}: ${finalScores[nickname]}</p>`;
      });
    } else {
      // If no scores were received or there was an error
      scoresDiv.innerHTML += `<p>No scores available.</p>`;
    }
  });



    </script>

    <div class="back-to-home">
      <a href="/places" class="back-to-home-btn">Go Back</a>
    </div>
  </body>
</html>
