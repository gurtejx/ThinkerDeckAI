<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trivia Game Host</title>
    <link rel="stylesheet" href="/places/style/main-game-multiplayer-host.css">
</head>

<body>
    <div id="question-container">
        <!-- Question will be displayed here -->
    </div>
    <div id="participants">
        <h3>Joined Participants</h3>
    </div>

    <div id="start-game-button">
        <button id="startExploringBtn">Start Exploring</button>
    </div>

    <div id="category-buttons" style="display:none;">
        <!-- Category buttons will be dynamically added here -->
    </div>

    <div id="nationalParks" style="display:none;">
        <!-- <img id="parkImage" src="" alt="National Park" style="max-width: 100%; height: auto;"> -->
        <button id="nextParkBtn">Next</button>
    </div>

    <script src="http://localhost:8000/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentCategory = null; // Global variable to store the current category

        // Listen for player join updates
        socket.on('playerJoined', (playerData) => {
            const participantsDiv = document.getElementById('participants');
            participantsDiv.innerHTML += `<p>${playerData.nickname}</p>`;
        });

        // Fetch categories and dynamically create buttons
        function fetchCategoriesAndCreateButtons() {
            fetch('/api/categories')
                .then(response => response.json())
                .then(categories => {
                    const categoryButtonsDiv = document.getElementById('category-buttons');
                    categoryButtonsDiv.innerHTML = ''; // Clear existing buttons
                    categories.forEach(category => {
                        const button = document.createElement('button');
                        button.textContent = category.name;
                        button.addEventListener('click', function () {
                            currentCategory = category.name; // Store the current category
                            document.getElementById('category-buttons').style.display = 'none';
                            if (category.name === 'North American National Parks') {
                                document.getElementById('nationalParks').style.display = 'block';
                                fetchNextPark(); // Fetch the first park image
                            }
                            // Fetch the first question for the category
                            generateQuestionsForCategory(currentCategory);
                        });
                        categoryButtonsDiv.appendChild(button);
                    });
                })
                .catch(error => console.error('Error fetching categories:', error));
        }

        // Handle start exploring button click
        document.getElementById('startExploringBtn').addEventListener('click', function () {
            document.getElementById('participants').style.display = 'none';
            document.getElementById('start-game-button').style.display = 'none';
            fetchCategoriesAndCreateButtons(); // Fetch categories and create buttons dynamically
            document.getElementById('category-buttons').style.display = 'block';
        });

        function fetchNextPark() {
            fetch('/getNationalParkImage')
                .then(response => response.json())
                .then(data => {
                    const imageUrl = data.imageUrl;
                    document.getElementById('parkImage').src = imageUrl;
                })
                .catch(error => console.error('Error fetching park image:', error));
        }

        function generateQuestionsForCategory(category) {
            fetch('/places/generate_questions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        category: category,
                        num_questions: 1
                    })
                })
                .then(response => response.json())
                .then(data => {
                    const questionContainer = document.getElementById('question-container');
                    const question = data.questions[0];
                    const imageUrl = data.photoUrl; // Get the image URL from the response

                    // Display the question
                    questionContainer.innerHTML =
                        `<p>${question.question}</p><img src="${imageUrl}" alt="Place Image" style="max-width: 100%; height: auto;">`;

                    // Emit the question options to players
                    socket.emit('questionOptions', {
                        options: question.choices
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }



        // Add click event listener to the "Next" button to fetch a new question for the current category
        document.getElementById('nextParkBtn').addEventListener('click', function () {
            if (currentCategory) { // Check if a category has been selected
                generateQuestionsForCategory(currentCategory); // Fetch a new question
            }
        });
    </script>

    <div class="back-to-home">
        <a href="/places" class="back-to-home-btn">Go Back</a>
    </div>
</body>

</html>